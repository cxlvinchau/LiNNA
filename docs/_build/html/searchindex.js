Search.setIndex({"docnames": ["_autosummary/linna", "_autosummary/linna.abstraction", "_autosummary/linna.basis_finder", "_autosummary/linna.coef_finder", "_autosummary/linna.network", "_autosummary/linna.utils", "index", "modules"], "filenames": ["_autosummary/linna.rst", "_autosummary/linna.abstraction.rst", "_autosummary/linna.basis_finder.rst", "_autosummary/linna.coef_finder.rst", "_autosummary/linna.network.rst", "_autosummary/linna.utils.rst", "index.rst", "modules.rst"], "titles": ["linna", "linna.abstraction", "linna.basis_finder", "linna.coef_finder", "linna.network", "linna.utils", "LiNNA (Linear Neural Network Abstraction)", "Modules"], "terms": {"modul": [0, 6], "class": [1, 2, 3, 4], "network": [1, 2, 3, 5], "basis_find": [1, 6], "liter": 1, "greedi": 1, "varianc": 1, "coef_find": [1, 6], "l1": 1, "l2": 1, "loader": [1, 4, 5], "dataload": [1, 4], "size": [1, 2, 4, 5, 6], "int": [1, 2, 3, 4], "1000": [1, 4], "get_reduction_r": 1, "determine_basi": 1, "layer_idx": [1, 2, 3, 4, 5], "basis_s": [1, 2], "determin": 1, "basi": [1, 2, 4], "given": [1, 2, 3, 4], "layer": [1, 2, 3, 4], "paramet": [1, 2, 3, 4, 5], "remov": [1, 4], "all": 1, "neuron": [1, 3, 4, 6], "ar": [1, 4], "which": [1, 4], "remove_neuron": 1, "refin": 1, "cex": 1, "tensor": [1, 3, 4], "classif": [1, 4, 5], "counterexampl": 1, "coincid": 1, "origin": 1, "torch": [1, 3, 4, 5], "variancebasisfind": [2, 6], "option": [2, 3, 4], "none": [2, 3, 4, 5], "io_dict": [2, 3], "dict": [2, 3], "ndarrai": [2, 3, 4], "find_basi": 2, "list": [2, 4], "find": 2, "return": [2, 3, 4, 5], "type": [2, 3, 4, 5], "greedybasisfind": [2, 6], "random_choic": 2, "fals": [2, 4, 5], "l1coeffind": [3, 6], "find_coeffici": 3, "process": 3, "specifi": 3, "str": [3, 5], "ani": 3, "algorithm": 3, "coeffici": [3, 4], "l2coeffind": [3, 6], "infinitycoeffind": [3, 6], "torch_model": [4, 5], "sequenti": [4, 5], "wrap": 4, "pytorch": [4, 5], "model": [4, 5], "A": 4, "consist": 4, "linear": 4, "possibli": 4, "non": 4, "function": [4, 5], "suppos": 4, "6": 4, "ha": 4, "follow": 4, "structur": 4, "nn": [4, 5], "relu": 4, "softmax": 4, "In": 4, "our": 4, "set": 4, "we": 4, "have": 4, "3": 4, "organ": 4, "0": 4, "1": 4, "2": 4, "throughout": 4, "uniqu": 4, "identifi": 4, "index": [4, 6], "i": [4, 6], "e": 4, "correspond": 4, "row": 4, "weight": 4, "matrix": 4, "reset": 4, "get_num_neuron": 4, "number": 4, "forward": [4, 5, 6], "x": [4, 5], "grad": [4, 5], "bool": 4, "comput": 4, "pass": 4, "until": 4, "inclus": 4, "default": 4, "output": 4, "neural": [4, 5], "classifi": 4, "input": 4, "result": 4, "delete_neuron": 4, "from": 4, "should": 4, "delet": 4, "restore_neuron": 4, "restor": 4, "set_basi": 4, "specif": 4, "note": 4, "due": 4, "readjust_weight": 4, "coef": 4, "readjust": 4, "outgo": 4, "effect": 4, "modifi": 4, "whose": 4, "adjust": 4, "get_io_matrix": 4, "io": 4, "imag": 4, "consid": 4, "networklay": [4, 6], "get_weight": 4, "get_bia": 4, "bia": 4, "set_weight": 4, "set_bia": 4, "get_input_weight": 4, "delete_output": 4, "delete_input": 4, "get_neuron_index": 4, "contain": [4, 5], "combin": [4, 6], "restore_input": 4, "an": 4, "restore_weight": 4, "w": [4, 5], "r": [4, 5], "t": [4, 5], "previous": 4, "load_tf_network": [5, 6], "file": 5, "load": 5, "tensorflow": 5, "tf": 5, "get_accuraci": [5, 6], "load_model": [5, 6], "path": 5, "load_experi": [5, 6], "save_result": [5, 6], "accuraci": 5, "reduction_r": 5, "file_nam": 5, "get_counterexampl": [5, 6], "original_model": 5, "reduced_model": 5, "true_label": 5, "counter": 5, "exampl": 5, "python": 6, "librari": 6, "feed": 6, "fordward": 6, "The": 6, "can": 6, "us": 6, "speed": 6, "up": 6, "verif": 6, "gain": 6, "insight": 6, "about": 6, "redund": 6, "core": 6, "idea": 6, "replac": 6, "therebi": 6, "overal": 6, "develop": 6, "maintain": 6, "technic": 6, "univers": 6, "munich": 6, "stefani": 6, "mohr": 6, "jan": 6, "k\u0159et\u0131": 6, "nsk\u00fd": 6, "calvin": 6, "chau": 6, "tbd": 6, "automata": 6, "util": 6, "search": 6, "page": 6}, "objects": {"": [[0, 0, 0, "-", "linna"]], "linna": [[1, 0, 0, "-", "abstraction"], [2, 0, 0, "-", "basis_finder"], [3, 0, 0, "-", "coef_finder"], [4, 0, 0, "-", "network"], [5, 0, 0, "-", "utils"]], "linna.abstraction": [[1, 1, 1, "", "Abstraction"]], "linna.abstraction.Abstraction": [[1, 2, 1, "", "abstract"], [1, 2, 1, "", "determine_basis"], [1, 2, 1, "", "get_reduction_rate"], [1, 2, 1, "", "refine"], [1, 2, 1, "", "remove_neuron"]], "linna.basis_finder": [[2, 1, 1, "", "GreedyBasisFinder"], [2, 1, 1, "", "VarianceBasisFinder"]], "linna.basis_finder.GreedyBasisFinder": [[2, 2, 1, "", "find_basis"]], "linna.basis_finder.VarianceBasisFinder": [[2, 2, 1, "", "find_basis"]], "linna.coef_finder": [[3, 1, 1, "", "InfinityCoefFinder"], [3, 1, 1, "", "L1CoefFinder"], [3, 1, 1, "", "L2CoefFinder"]], "linna.coef_finder.InfinityCoefFinder": [[3, 2, 1, "", "find_coefficients"]], "linna.coef_finder.L1CoefFinder": [[3, 2, 1, "", "find_coefficients"]], "linna.coef_finder.L2CoefFinder": [[3, 2, 1, "", "find_coefficients"]], "linna.network": [[4, 1, 1, "", "Network"], [4, 1, 1, "", "NetworkLayer"]], "linna.network.Network": [[4, 2, 1, "", "classify"], [4, 2, 1, "", "delete_neuron"], [4, 2, 1, "", "forward"], [4, 2, 1, "", "get_io_matrix"], [4, 2, 1, "", "get_num_neurons"], [4, 2, 1, "", "readjust_weights"], [4, 2, 1, "", "reset"], [4, 2, 1, "", "restore_neuron"], [4, 2, 1, "", "set_basis"]], "linna.network.NetworkLayer": [[4, 2, 1, "", "delete_input"], [4, 2, 1, "", "delete_output"], [4, 2, 1, "", "get_bias"], [4, 2, 1, "", "get_input_weight"], [4, 2, 1, "", "get_neuron_index"], [4, 2, 1, "", "get_weight"], [4, 2, 1, "", "readjust_weights"], [4, 2, 1, "", "reset"], [4, 2, 1, "", "restore_input"], [4, 2, 1, "", "restore_neuron"], [4, 2, 1, "", "restore_weights"], [4, 2, 1, "", "set_bias"], [4, 2, 1, "", "set_weight"]], "linna.utils": [[5, 3, 1, "", "forward"], [5, 3, 1, "", "get_accuracy"], [5, 3, 1, "", "get_counterexamples"], [5, 3, 1, "", "load_experiment"], [5, 3, 1, "", "load_model"], [5, 3, 1, "", "load_tf_network"], [5, 3, 1, "", "save_results"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"linna": [0, 1, 2, 3, 4, 5, 6], "abstract": [1, 6], "basis_find": 2, "coef_find": 3, "network": [4, 6], "util": 5, "linear": 6, "neural": 6, "author": 6, "public": 6, "api": 6, "document": 6, "content": 6, "indic": 6, "tabl": 6, "modul": 7, "automata": 7}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"linna": [[0, "module-linna"]], "linna.abstraction": [[1, "module-linna.abstraction"]], "linna.basis_finder": [[2, "module-linna.basis_finder"]], "linna.coef_finder": [[3, "module-linna.coef_finder"]], "linna.network": [[4, "module-linna.network"]], "linna.utils": [[5, "module-linna.utils"]], "LiNNA (Linear Neural Network Abstraction)": [[6, "linna-linear-neural-network-abstraction"]], "Authors": [[6, "authors"]], "Publications": [[6, "publications"]], "API Documentation": [[6, "api-documentation"]], "Contents:": [[6, null]], "Indices and tables": [[6, "indices-and-tables"]], "Modules": [[7, "modules"]], "automata Module": [[7, "automata-module"]]}, "indexentries": {"linna": [[0, "module-linna"]], "module": [[0, "module-linna"], [1, "module-linna.abstraction"], [2, "module-linna.basis_finder"], [3, "module-linna.coef_finder"], [4, "module-linna.network"], [5, "module-linna.utils"]], "abstraction (class in linna.abstraction)": [[1, "linna.abstraction.Abstraction"]], "abstract() (linna.abstraction.abstraction method)": [[1, "linna.abstraction.Abstraction.abstract"]], "determine_basis() (linna.abstraction.abstraction method)": [[1, "linna.abstraction.Abstraction.determine_basis"]], "get_reduction_rate() (linna.abstraction.abstraction method)": [[1, "linna.abstraction.Abstraction.get_reduction_rate"]], "linna.abstraction": [[1, "module-linna.abstraction"]], "refine() (linna.abstraction.abstraction method)": [[1, "linna.abstraction.Abstraction.refine"]], "remove_neuron() (linna.abstraction.abstraction method)": [[1, "linna.abstraction.Abstraction.remove_neuron"]], "greedybasisfinder (class in linna.basis_finder)": [[2, "linna.basis_finder.GreedyBasisFinder"]], "variancebasisfinder (class in linna.basis_finder)": [[2, "linna.basis_finder.VarianceBasisFinder"]], "find_basis() (linna.basis_finder.greedybasisfinder method)": [[2, "linna.basis_finder.GreedyBasisFinder.find_basis"]], "find_basis() (linna.basis_finder.variancebasisfinder method)": [[2, "linna.basis_finder.VarianceBasisFinder.find_basis"]], "linna.basis_finder": [[2, "module-linna.basis_finder"]], "infinitycoeffinder (class in linna.coef_finder)": [[3, "linna.coef_finder.InfinityCoefFinder"]], "l1coeffinder (class in linna.coef_finder)": [[3, "linna.coef_finder.L1CoefFinder"]], "l2coeffinder (class in linna.coef_finder)": [[3, "linna.coef_finder.L2CoefFinder"]], "find_coefficients() (linna.coef_finder.infinitycoeffinder method)": [[3, "linna.coef_finder.InfinityCoefFinder.find_coefficients"]], "find_coefficients() (linna.coef_finder.l1coeffinder method)": [[3, "linna.coef_finder.L1CoefFinder.find_coefficients"]], "find_coefficients() (linna.coef_finder.l2coeffinder method)": [[3, "linna.coef_finder.L2CoefFinder.find_coefficients"]], "linna.coef_finder": [[3, "module-linna.coef_finder"]], "network (class in linna.network)": [[4, "linna.network.Network"]], "networklayer (class in linna.network)": [[4, "linna.network.NetworkLayer"]], "classify() (linna.network.network method)": [[4, "linna.network.Network.classify"]], "delete_input() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.delete_input"]], "delete_neuron() (linna.network.network method)": [[4, "linna.network.Network.delete_neuron"]], "delete_output() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.delete_output"]], "forward() (linna.network.network method)": [[4, "linna.network.Network.forward"]], "get_bias() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.get_bias"]], "get_input_weight() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.get_input_weight"]], "get_io_matrix() (linna.network.network method)": [[4, "linna.network.Network.get_io_matrix"]], "get_neuron_index() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.get_neuron_index"]], "get_num_neurons() (linna.network.network method)": [[4, "linna.network.Network.get_num_neurons"]], "get_weight() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.get_weight"]], "linna.network": [[4, "module-linna.network"]], "readjust_weights() (linna.network.network method)": [[4, "linna.network.Network.readjust_weights"]], "readjust_weights() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.readjust_weights"]], "reset() (linna.network.network method)": [[4, "linna.network.Network.reset"]], "reset() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.reset"]], "restore_input() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.restore_input"]], "restore_neuron() (linna.network.network method)": [[4, "linna.network.Network.restore_neuron"]], "restore_neuron() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.restore_neuron"]], "restore_weights() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.restore_weights"]], "set_basis() (linna.network.network method)": [[4, "linna.network.Network.set_basis"]], "set_bias() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.set_bias"]], "set_weight() (linna.network.networklayer method)": [[4, "linna.network.NetworkLayer.set_weight"]], "forward() (in module linna.utils)": [[5, "linna.utils.forward"]], "get_accuracy() (in module linna.utils)": [[5, "linna.utils.get_accuracy"]], "get_counterexamples() (in module linna.utils)": [[5, "linna.utils.get_counterexamples"]], "linna.utils": [[5, "module-linna.utils"]], "load_experiment() (in module linna.utils)": [[5, "linna.utils.load_experiment"]], "load_model() (in module linna.utils)": [[5, "linna.utils.load_model"]], "load_tf_network() (in module linna.utils)": [[5, "linna.utils.load_tf_network"]], "save_results() (in module linna.utils)": [[5, "linna.utils.save_results"]]}})